
ps：网上有说可以通过共享变量来实现单例模式，但是这点需要开发者共同遵守公约才能实现，否则会出现多个实例。
一般还是通过建立私有构造器实现，比较靠谱。在此，我也只是写了私有构造器的例子。


Singleton模式（单例模式）是非常常用的一个设计模式，用于控制对象的数量，
防止被外界初始化和修改等，在java中的作用是保证一个Class只有一个实例存在。

经常在一些操作中，比如IO处理、数据库操作、无状态的工具服务类等我们只需
要有一个实例存在即可完成我们的工作，而创建多个实例可能是一项很消耗系统
资源的工作。

使用Singleton的好处就在于可以节省内存，加速资源的获取速度，
因为它限制了实例的个数，有利于Java垃圾回收等工作；说Singleton模式很简单
是因为她只需要一个类就可以完成，但是如果涉及考虑DCL双锁检测
（double checked locking）、多个类加载器（ClassLoader）协同时、跨JVM
（集群、远程EJB等）时、单例对象被销毁后重建等讨论的话，这个模式又是非常
复杂的，这里只考虑简单的单例模式实现。